# Pull total number of orders that were completed on 18th March 2023

# Pull total number of orders that were completed on 18th March 2023 with the first name ‘John’ and last name Doe’
# Pull total number of customers that purchased in January 2023 and the average amount spend per customer
# Pull the departments that generated less than $600 in 2022
# What is the most and least revenue we have generated by an order
# What were the orders that were purchased in our most lucrative order

# TABLE INFO :
# SALES – Date, Order_id, Item_id, Customer_id, Quantity, Revenue
# ITEMS – Item_id, Item_name, price, department
# CUSTOMERS- customer_id, first_name,last_name,Address
# Small Dataset can be generated using chatgpt. 

CREATE DATABASE IF NOT EXISTS SalesDB;
USE SalesDB;

-- 创建 SALES 表
CREATE TABLE IF NOT EXISTS SALES (
    Date DATE,
    Order_id INT,
    Item_id INT,
    Customer_id INT,
    Quantity INT,
    Revenue DECIMAL(10,2),
    PRIMARY KEY (Order_id, Item_id)
);

-- 创建 ITEMS 表
CREATE TABLE IF NOT EXISTS ITEMS (
    Item_id INT PRIMARY KEY,
    Item_name VARCHAR(50),
    Price DECIMAL(10,2),
    Department VARCHAR(50)
);

-- 创建 CUSTOMERS 表
CREATE TABLE IF NOT EXISTS CUSTOMERS (
    Customer_id INT PRIMARY KEY,
    First_name VARCHAR(50),
    Last_name VARCHAR(50),
    Address VARCHAR(100)
);

-- 插入 SALES 数据
INSERT INTO SALES (Date, Order_id, Item_id, Customer_id, Quantity, Revenue) VALUES
('2023-03-18', 1001, 201, 1, 2, 40.00),
('2023-03-18', 1002, 202, 2, 1, 25.00),
('2023-03-18', 1003, 203, 3, 3, 90.00),
('2023-01-15', 1004, 201, 4, 1, 20.00),
('2023-01-20', 1005, 204, 5, 2, 50.00),
('2022-12-30', 1006, 205, 6, 1, 10.00),
('2022-11-25', 1007, 206, 7, 5, 300.00),
('2022-06-10', 1008, 207, 8, 1, 150.00);

-- 插入 ITEMS 数据
INSERT INTO ITEMS (Item_id, Item_name, Price, Department) VALUES
(201, 'Soap', 20.00, 'Hygiene'),
(202, 'Shampoo', 25.00, 'Hygiene'),
(203, 'Perfume', 30.00, 'Beauty'),
(204, 'T-Shirt', 25.00, 'Apparel'),
(205, 'Notebook', 10.00, 'Stationery'),
(206, 'Laptop', 60.00, 'Electronics'),
(207, 'Headphones', 150.00, 'Electronics');

-- 插入 CUSTOMERS 数据
INSERT INTO CUSTOMERS (Customer_id, First_name, Last_name, Address) VALUES
(1, 'John', 'Doe', 'NY, USA'),
(2, 'Alice', 'Smith', 'CA, USA'),
(3, 'Bob', 'Johnson', 'TX, USA'),
(4, 'Charlie', 'Brown', 'FL, USA'),
(5, 'David', 'Wilson', 'NJ, USA'),
(6, 'Emma', 'Davis', 'WA, USA'),
(7, 'Frank', 'Miller', 'IL, USA'),
(8, 'Grace', 'Taylor', 'CO, USA');


SELECT COUNT(DISTINCT S.Order_id) AS total_orders
FROM SALES S
JOIN CUSTOMERS C ON S.Customer_id = C.Customer_id
WHERE S.Date = '2023-03-18' 
AND C.First_name = 'John' 
AND C.Last_name = 'Doe';

SELECT COUNT(DISTINCT S.Customer_id) AS total_customers,
       AVG(S.Revenue) AS avg_revenue_per_customer
FROM SALES S
WHERE S.Date BETWEEN '2023-01-01' AND '2023-01-31';

SELECT I.Department
FROM SALES S
JOIN ITEMS I ON S.Item_id = I.Item_id
WHERE S.Date BETWEEN '2022-01-01' AND '2022-12-31'
GROUP BY I.Department
HAVING SUM(S.Revenue) < 600;


SELECT Order_id, SUM(Revenue) AS total_revenue
FROM SALES
GROUP BY Order_id
ORDER BY total_revenue DESC
LIMIT 1;  -- Most revenue

SELECT Order_id, SUM(Revenue) AS total_revenue
FROM SALES
GROUP BY Order_id
ORDER BY total_revenue ASC
LIMIT 1;  -- Least revenue


WITH MaxRevenueOrder AS (
    SELECT Order_id
    FROM SALES
    GROUP BY Order_id
    ORDER BY SUM(Revenue) DESC
    LIMIT 1
)
SELECT S.Order_id, S.Item_id, S.Quantity, S.Revenue
FROM SALES S
WHERE S.Order_id IN (SELECT Order_id FROM MaxRevenueOrder);
